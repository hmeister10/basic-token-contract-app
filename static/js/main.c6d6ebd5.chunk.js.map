{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","tokenSaleAddress","userTokens","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","MyToken","networks","tokenInstance","Contract","abi","address","tokenSaleInstance","MyTokenSale","kycInstance","KYC","methods","kycCompleted","call","kycStatus","owner","kycOwner","listenToTokenTransfer","setState","isKycOwner","updateUserTokens","alert","error","handleInputChange","event","target","value","type","checked","name","handleAddToWhitelist","setKYCCompleted","kycAddress","send","from","handleBuyTokens","buyTokens","utils","toWei","events","Transfer","to","on","balanceOf","err","getOwnerData","onChange","onClick","this","className","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6d6ebd5.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport MyToken from \"./contracts/MyToken.json\";\nimport MyTokenSale from \"./contracts/MyTokenSale.json\";\nimport KYC from \"./contracts/KYC.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { loaded: false, tokenSaleAddress: \"\", userTokens:0 };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await this.web3.eth.net.getId();\n      const deployedNetwork = MyToken.networks[networkId];\n      this.tokenInstance = new this.web3.eth.Contract(\n        MyToken.abi,\n        MyToken.networks[networkId] && MyToken.networks[networkId].address,\n      );\n\n      this.tokenSaleInstance = new this.web3.eth.Contract(\n        MyTokenSale.abi,\n        MyTokenSale.networks[networkId] && MyTokenSale.networks[networkId].address,\n      );\n\n      this.kycInstance = new this.web3.eth.Contract(\n        KYC.abi,\n        KYC.networks[networkId] && KYC.networks[networkId].address,\n      );\n      \n      const kycStatus = await this.kycInstance.methods.kycCompleted(this.accounts[0]).call()\n      const kycOwner = await this.kycInstance.methods.owner().call()\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      // this.setState({ web3, accounts, contract: instance }, this.runExample);\n      this.listenToTokenTransfer()\n      this.setState({\n        loaded: true, \n        tokenSaleAddress: MyTokenSale.networks[networkId].address,\n        kycStatus,\n        isKycOwner: this.accounts[0] === kycOwner\n      }, this.updateUserTokens)\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type == \"checkbox\" ? target.checked : target.value\n    const name = target.name\n    this.setState({\n      [name]: value\n    })\n  }\n  \n  handleAddToWhitelist = async () => {\n    this.kycInstance.methods.setKYCCompleted(this.state.kycAddress).send({\n      from: this.accounts[0]\n    })\n\n  }\n\n  handleBuyTokens = async () => {\n    await this.tokenSaleInstance.methods\n      .buyTokens(this.accounts[0])\n      .send({\n        from: this.accounts[0], \n        value: this.web3.utils.toWei(\"1\", \"wei\")\n      })\n  }\n\n  listenToTokenTransfer = async () => {\n    this.tokenInstance.events.Transfer({\n      to: this.accounts[0]\n    }).on(\"data\", this.updateUserTokens)\n  }\n\n  updateUserTokens = async () => {\n     try {\n        console.log(typeof this.accounts[0])\n        console.log(this.tokenInstance.methods);\n\n        let userTokens = await this.tokenInstance.methods\n          .balanceOf(this.accounts[0])\n          .call()\n        console.log({userTokens})\n        this.setState({userTokens})\n        // console.log({kycObj})\n      } catch(err) {\n        console.log({err})\n      }\n  }\n\n  getOwnerData = () => {\n    if(this.state.isKycOwner) {\n    return (\n      <div>\n        <h2>KYC Whitelisting</h2>\n        <div>\n          <label>Address to allow:</label> <input \n            type=\"text\" \n            name=\"kycAddress\" \n            value={ this.state.kycAddress}\n            onChange={this.handleInputChange}/>\n          <button onClick={this.handleAddToWhitelist}>Add to whitelist</button>\n        </div>\n      </div>)\n    } else {\n      return (<></>)\n    }\n  }\n\n  kycStatus = () => {\n    console.log(this.state.kycStatus)\n    if(!this.state.kycStatus) {\n      return (\n        <div>\n          <p>KYC hasnt been completed yet</p>\n          <p>Ask the admin to complete the KYC for your address</p>\n          <p>Address: {this.accounts[0]}</p>\n\n        </div>\n      )\n    } else {\n      return (\n      <div>\n          <h2>Buy Tokens</h2>\n          <div>\n            <p>You currently have {this.state.userTokens} CAPPU tokens</p>\n          </div>\n          <div>\n            <p>Token Sale Address: {this.state.tokenSaleAddress} </p>\n            <button onClick={this.handleBuyTokens}>Buy 1 token</button>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    if (!this.web3 && !this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>StarDucks Cappuchino Sale</h1>\n        <p>Get your tokens now.</p>\n        {this.getOwnerData()}\n        \n        {this.kycStatus()}\n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}